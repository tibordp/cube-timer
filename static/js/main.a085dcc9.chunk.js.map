{"version":3,"sources":["bluetooth.ts","App.tsx","wakeLock.ts","index.tsx"],"names":["ConnectionState","CUBE_TIME_UUID","formatDuration","milliseconds","Date","Math","max","toISOString","substr","replace","FakeRunTime","React","useState","count","setCount","rafRef","useRef","previousTimeRef","animate","time","undefined","current","deltaTime","prevCount","requestAnimationFrame","useEffect","cancelAnimationFrame","className","CubeDisplay","timerState","state","duration","isRunning","isInspection","isDefaultState","reducer","action","epoch","newState","initialData","App","NOT_CONNECTED","connectionState","setConnectionState","device","setDevice","setTimerState","connect","a","CONNECTING","navigator","bluetooth","requestDevice","filters","services","connectGatt","gatt","getPrimaryService","service","getCharacteristic","characteristic","oncharacteristicvaluechanged","value","getUint32","byteLength","getInt32","readValue","startNotifications","CONNECTED","console","error","FAILED","reconnect","this","disconnect","then","addEventListener","removeEventListener","useBluetooth","useReducer","history","dispatch","enabled","sentinel","setSentinel","wakeLock","request","info","acquire","release","useWakeLock","useMemo","orderedHistory","Object","entries","map","b","parseInt","sort","values","Infinity","best","length","reduce","min","avg5results","slice","avg5","avg12results","avg12","getHistoryData","List","ListItem","dense","ListItemText","primary","secondary","labelId","role","id","ListItemSecondaryAction","IconButton","edge","aria-label","onClick","disabled","button","startIcon","variant","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a085dcc9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CUBE_TIME_UUID = \"eb0e77c3-af14-4b7f-ac80-d3631dc386ac\";\nconst CHARACTERISTIC_UUID = \"eb0e77c3-af14-4b7f-ac80-d3631dc386ad\";\n\nexport interface TimerState {\n  state: number;\n  epoch: number;\n  duration: number;\n}\n\nexport enum ConnectionState {\n  NOT_CONNECTED,\n  CONNECTING,\n  CONNECTED,\n  FAILED,\n}\n\nexport interface UseBluetoothResult {\n  connect(): void;\n  disconnect(): void;\n  connectionState: ConnectionState;\n  timerState: TimerState;\n}\n\nexport function useBluetooth(): UseBluetoothResult {\n  const [connectionState, setConnectionState] = React.useState<ConnectionState>(\n    ConnectionState.NOT_CONNECTED\n  );\n  const [device, setDevice] = React.useState<BluetoothDevice | null>(null);\n  const [timerState, setTimerState] = React.useState<TimerState>({\n    state: 0,\n    epoch: 0,\n    duration: 0,\n  });\n\n  const connect = async () => {\n    setConnectionState(ConnectionState.CONNECTING);\n    try {\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{ services: [CUBE_TIME_UUID] }],\n      });\n      setDevice(device);\n    } catch (e) {\n      // User has likely canceled the dialog, or didn't find\n      // the device, so we don't treat this as error.\n      setConnectionState(ConnectionState.NOT_CONNECTED);\n    }\n  };\n\n  const connectGatt = async (device: BluetoothDevice) => {\n    try {\n      setConnectionState(ConnectionState.CONNECTING);\n      await device.gatt?.connect();\n      const service = await device.gatt?.getPrimaryService(CUBE_TIME_UUID);\n      const characteristic = await service?.getCharacteristic(\n        CHARACTERISTIC_UUID\n      );\n      characteristic!.oncharacteristicvaluechanged = () => {\n        const state = characteristic!.value!.getUint32(0, true);\n        const epoch = characteristic!.value!.getUint32(4, true);\n        const duration =\n          characteristic!.value!.byteLength > 4\n            ? characteristic!.value!.getInt32(8, true)\n            : 0;\n\n        setTimerState({ state, epoch, duration });\n      };\n      await characteristic?.readValue();\n      characteristic?.startNotifications();\n      setConnectionState(ConnectionState.CONNECTED);\n    } catch (e) {\n      console.error(e);\n      setConnectionState(ConnectionState.FAILED);\n    }\n  };\n\n  function reconnect(this: BluetoothDevice) {\n    connectGatt(this);\n  }\n\n  const disconnect = async () => {\n    setDevice(null);\n  };\n\n  React.useEffect(() => {\n    if (!device) {\n      setConnectionState(ConnectionState.NOT_CONNECTED);\n      return () => {};\n    }\n\n    connectGatt(device).then(() =>\n      device.addEventListener(\"gattserverdisconnected\", reconnect)\n    );\n\n    return () => {\n      device.removeEventListener(\"gattserverdisconnected\", reconnect);\n      device.gatt?.disconnect();\n    };\n  }, [device]);\n\n  return {\n    connect,\n    disconnect,\n    connectionState,\n    timerState,\n  };\n}\n","import Button from \"@material-ui/core/Button/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { ConnectionState, TimerState, useBluetooth } from \"./bluetooth\";\nimport { useWakeLock } from \"./wakeLock\";\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BluetoothIcon from \"@material-ui/icons/Bluetooth\";\nimport BluetoothDisabledIcon from \"@material-ui/icons/BluetoothDisabled\";\nimport Card from \"@material-ui/core/Card/Card\";\n\nexport function formatDuration(milliseconds: number): string {\n  if (milliseconds === -1) {\n    return \"DNF\";\n  }\n  return new Date(Math.max(0, milliseconds))\n    .toISOString()\n    .substr(14, 9)\n    .replace(/^[0:]+(?!\\.)/, \"\");\n}\n\n/**\n * While the timer is running, the device does not send anything via Bluetooth,\n * so we fake the running time display locally. Once the timer is stopped, the\n * correct time from the device will be displayed.\n */\nfunction FakeRunTime() {\n  const [count, setCount] = React.useState(0);\n\n  const rafRef = React.useRef<number>();\n  const previousTimeRef = React.useRef<number>();\n\n  const animate = (time: number) => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n      setCount((prevCount) => prevCount + deltaTime);\n    }\n    previousTimeRef.current = time;\n    rafRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    rafRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(rafRef.current!);\n  }, []);\n\n  return <span className=\"running\">{formatDuration(count)}</span>;\n}\n\ninterface CubeDisplayProps {\n  timerState: TimerState;\n}\n\nfunction CubeDisplay({ timerState }: CubeDisplayProps) {\n  const { state, duration } = timerState;\n  const isRunning = state >= 20 && state < 30;\n  const isInspection = state >= 10 && state < 20;\n  const isDefaultState = !isRunning && !isInspection;\n\n  return (\n    <>\n      {isDefaultState && duration !== 0 && <>{formatDuration(duration)}</>}\n      {isDefaultState && duration === 0 && <>Ready!</>}\n      {isRunning && <FakeRunTime />}\n      {isInspection && <span className=\"inspection\">Inspection</span>}\n    </>\n  );\n}\n\ninterface HistoryAction {\n  action: \"push\" | \"delete\" | \"clear\" | \"initialize\";\n  epoch?: number;\n  timerState?: TimerState;\n  initialData?: Record<number, number>;\n}\n\nfunction reducer(\n  state: Record<number, number>,\n  action: HistoryAction\n): Record<number, number> {\n  switch (action.action) {\n    case \"push\": {\n      if (state[action.timerState!.epoch] === action.timerState!.duration)\n        return state;\n      const newState = { ...state };\n      if (action.timerState!.duration !== 0) {\n        newState[action.timerState!.epoch] = action.timerState!.duration;\n      } else {\n        delete newState[action.timerState!.epoch];\n      }\n      return newState;\n    }\n    case \"delete\": {\n      const newState = { ...state };\n      delete newState[action.epoch!];\n      return newState;\n    }\n    case \"clear\":\n      return {};\n    case \"initialize\":\n      return action.initialData!;\n  }\n}\n\ninterface HistoryData {\n  orderedHistory: [number, number][];\n  best?: number;\n  avg5?: number;\n  avg12?: number;\n}\n\nfunction getHistoryData(history: Record<number, number>): HistoryData {\n  const orderedHistory = Object.entries(history)\n    .map(([a, b]) => [parseInt(a), b])\n    .sort((a, b) => b[0] - a[0]);\n\n  const values = orderedHistory.map(([a, b]) => (b === -1 ? Infinity : b));\n  const best =\n    values.length > 0\n      ? values.reduce((a, b) => Math.min(a, b), Infinity)\n      : undefined;\n  const avg5results = values.slice(0, 5).sort((a, b) => a - b);\n  const avg5 =\n    avg5results.length === 5\n      ? avg5results.slice(1, 4).reduce((a, b) => a + b, 0) / 3\n      : undefined;\n  const avg12results = values.slice(0, 12).sort((a, b) => a - b);\n  const avg12 =\n    avg12results.length === 12\n      ? avg12results.slice(1, 11).reduce((a, b) => a + b, 0) / 10\n      : undefined;\n\n  return {\n    orderedHistory: orderedHistory as [number, number][],\n    best: best === Infinity ? -1 : best,\n    avg5: avg5 === Infinity ? -1 : avg5,\n    avg12: avg12 === Infinity ? -1 : avg12,\n  };\n}\n\nfunction App() {\n  const { connect, disconnect, connectionState, timerState } = useBluetooth();\n\n  const [history, dispatch] = React.useReducer(reducer, []);\n  const hasWakeLock = useWakeLock(\n    connectionState === ConnectionState.CONNECTED ||\n      connectionState === ConnectionState.CONNECTING\n  );\n\n  React.useEffect(() => {\n    dispatch({ action: \"push\", timerState });\n  }, [timerState]);\n\n  const { orderedHistory, best, avg5, avg12 } = React.useMemo(\n    () => getHistoryData(history),\n    [history]\n  );\n\n  return (\n    <>\n      <div className=\"statusDisplay\">\n        {connectionState === ConnectionState.CONNECTED && (\n          <CubeDisplay timerState={timerState} />\n        )}\n      </div>\n      <Card className=\"card\">\n        <List className=\"stats\">\n          <ListItem dense>\n            <ListItemText\n              primary=\"Best\"\n              secondary={best !== undefined ? formatDuration(best) : \"-\"}\n            />\n          </ListItem>\n          <ListItem dense>\n            <ListItemText\n              primary=\"Avg 5\"\n              secondary={avg5 !== undefined ? formatDuration(avg5) : \"-\"}\n            />\n          </ListItem>\n          <ListItem dense>\n            <ListItemText\n              primary=\"Avg 12\"\n              secondary={avg12 !== undefined ? formatDuration(avg12) : \"-\"}\n            />\n          </ListItem>\n        </List>\n\n        <List className=\"results\">\n          {orderedHistory.map(([epoch, value]) => {\n            const labelId = `list-label-${epoch}`;\n\n            return (\n              <ListItem key={epoch} role={undefined} dense>\n                <ListItemText id={labelId} primary={formatDuration(value)} />\n                <ListItemSecondaryAction>\n                  <IconButton edge=\"end\" aria-label=\"comments\">\n                    <DeleteIcon\n                      onClick={() => dispatch({ action: \"delete\", epoch })}\n                    />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            );\n          })}\n          <ListItem\n            role={undefined}\n            dense\n            disabled={orderedHistory.length === 0}\n            onClick={() => dispatch({ action: \"clear\" })}\n            button\n          >\n            <ListItemText primary=\"Clear history\" />\n          </ListItem>\n        </List>\n      </Card>\n      {connectionState === ConnectionState.FAILED && (\n        <>\n          <Button startIcon={<BluetoothIcon />} onClick={connect}>\n            Connect\n          </Button>\n        </>\n      )}\n      {connectionState === ConnectionState.NOT_CONNECTED && (\n        <>\n          <Button\n            startIcon={<BluetoothIcon />}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={connect}\n          >\n            Connect\n          </Button>\n        </>\n      )}\n      {connectionState === ConnectionState.CONNECTING && (\n        <>\n          <Button\n            startIcon={<BluetoothIcon />}\n            variant=\"contained\"\n            disabled\n            color=\"primary\"\n            onClick={connect}\n          >\n            Connecting...\n          </Button>\n        </>\n      )}\n      {connectionState === ConnectionState.CONNECTED && (\n        <Button\n          startIcon={<BluetoothDisabledIcon />}\n          variant=\"contained\"\n          color=\"default\"\n          onClick={disconnect}\n        >\n          Disconnect\n        </Button>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nexport function useWakeLock(enabled: boolean): boolean {\n  const [sentinel, setSentinel] = React.useState<WakeLockSentinel | null>(null);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return () => {};\n    }\n\n    const acquire = async () => {\n      try {\n        const sentinel = await navigator.wakeLock.request(\"screen\");\n        console.info(\"We have the wake lock.\");\n        setSentinel(sentinel);\n        sentinel.addEventListener(\"release\", () => {\n          console.info(\"We no longer have the wake lock.\");\n          setSentinel(null);\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    acquire();\n\n    return () => {\n      sentinel?.release();\n    };\n  }, [enabled]);\n\n  return sentinel !== null;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}