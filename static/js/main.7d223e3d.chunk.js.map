{"version":3,"sources":["bluetooth.ts","App.tsx","index.tsx"],"names":["ConnectionState","CUBE_TIME_UUID","getBackgroundColor","connectionState","timerState","CONNECTED","formatDuration","milliseconds","Date","Math","max","toISOString","substr","replace","FakeRunTime","React","useState","count","setCount","rafRef","useRef","previousTimeRef","animate","time","undefined","current","deltaTime","prevCount","requestAnimationFrame","useEffect","cancelAnimationFrame","className","CubeDisplay","timerDuration","isRunning","isInspection","isDefaultState","duration","App","bluetoothGatt","setBluetoothGatt","device","setDevice","setTimerState","epoch","setTimerDuration","connect","a","navigator","bluetooth","requestDevice","filters","services","disconnect","gatt","ongattserverdisconnected","getPrimaryService","service","getCharacteristic","durationCharacteristic","oncharacteristicvaluechanged","value","getUint32","byteLength","getInt32","startNotifications","stateCharacteristic","readValue","CONNECTING","NOT_CONNECTED","useBluetooth","style","backgroundColor","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d223e3d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CUBE_TIME_UUID = \"eb0e77c3-af14-4b7f-ac80-d3631dc386ac\";\nconst DURATION_CHARACTERISTIC_UUID = \"eb0e77c3-af14-4b7f-ac80-d3631dc386ad\";\nconst STATE_CHARACTERISTIC_UUID = \"eb0e77c3-af14-4b7f-ac80-d3631dc386ae\";\n\nexport interface DurationData {\n  epoch: number;\n  duration: number;\n}\n\nexport enum ConnectionState {\n  NOT_CONNECTED,\n  CONNECTING,\n  CONNECTED,\n}\n\nexport interface UseBluetoothResult {\n  connect(): void;\n  disconnect(): void;\n  connectionState: ConnectionState;\n  timerState: number;\n  timerDuration: DurationData;\n}\n\nexport function useBluetooth(): UseBluetoothResult {\n  const [\n    bluetoothGatt,\n    setBluetoothGatt,\n  ] = React.useState<BluetoothRemoteGATTServer | null>(null);\n  const [device, setDevice] = React.useState<BluetoothDevice | null>(null);\n  const [timerState, setTimerState] = React.useState<number>(0);\n  const [timerDuration, setTimerDuration] = React.useState<DurationData>({\n    epoch: 0,\n    duration: 0,\n  });\n\n  const connect = async () => {\n    const device = await navigator.bluetooth.requestDevice({\n      filters: [{ services: [CUBE_TIME_UUID] }],\n    });\n    setDevice(device);\n  };\n\n  const disconnect = async () => {\n    setDevice(null);\n  };\n\n  React.useEffect(() => {\n    if (!device) {\n      return () => {};\n    }\n\n    const connect = async () => {\n      const gatt = await device.gatt?.connect();\n      device.ongattserverdisconnected = () => {\n        setBluetoothGatt(null);\n        connect();\n      };\n\n      const service = await gatt?.getPrimaryService(CUBE_TIME_UUID);\n      const durationCharacteristic = await service?.getCharacteristic(\n        DURATION_CHARACTERISTIC_UUID\n      );\n      durationCharacteristic!.oncharacteristicvaluechanged = () => {\n        const epoch = durationCharacteristic!.value!.getUint32(0, true);\n        const duration =\n          durationCharacteristic!.value!.byteLength > 4\n            ? durationCharacteristic!.value!.getInt32(4, true)\n            : 0;\n\n        setTimerDuration({ epoch, duration });\n      };\n      durationCharacteristic?.startNotifications();\n\n      const stateCharacteristic = await service?.getCharacteristic(\n        STATE_CHARACTERISTIC_UUID\n      );\n      stateCharacteristic!.oncharacteristicvaluechanged = () => {\n        setTimerState(stateCharacteristic?.value?.getUint32(0, true) || 0);\n      };\n      stateCharacteristic?.startNotifications();\n\n      await durationCharacteristic?.readValue();\n      await stateCharacteristic?.readValue();\n\n      setBluetoothGatt(gatt!);\n    };\n    connect();\n\n    return () => {\n      bluetoothGatt?.disconnect();\n      setBluetoothGatt(null);\n    };\n  }, [device]);\n\n  let connectionState;\n  if (!device) connectionState = ConnectionState.NOT_CONNECTED;\n  else if (!bluetoothGatt) connectionState = ConnectionState.CONNECTING;\n  else connectionState = ConnectionState.CONNECTED;\n\n  return {\n    connect,\n    disconnect,\n    connectionState,\n    timerDuration,\n    timerState,\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  ConnectionState,\n  DurationData,\n  useBluetooth,\n} from \"./bluetooth\";\n\nfunction getBackgroundColor(\n  connectionState: ConnectionState,\n  timerState: number\n) {\n  if (connectionState !== ConnectionState.CONNECTED) return \"#f5f2f0\";\n  if (timerState >= 10 && timerState < 20) return \"#f22d54\";\n  if (timerState >= 20 && timerState < 30) return \"#41c248\";\n\n  return \"#f5f2f0\";\n}\n\nexport function formatDuration(milliseconds: number): string {\n  if (milliseconds === -1) {\n    return \"DNF\";\n  }\n  return new Date(Math.max(0, milliseconds))\n    .toISOString()\n    .substr(14, 9)\n    .replace(/^[0:]+(?!\\.)/, \"\");\n}\n\n/**\n * While the timer is running, the device does not send anything via Bluetooth, \n * so we fake the running time display locally. Once the timer is stopped, the\n * correct time from the device will be displayed.\n */\nfunction FakeRunTime() {\n  const [count, setCount] = React.useState(0);\n\n  const rafRef = React.useRef<number>();\n  const previousTimeRef = React.useRef<number>();\n\n  const animate = (time: number) => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n      setCount((prevCount) => prevCount + deltaTime);\n    }\n    previousTimeRef.current = time;\n    rafRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    rafRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(rafRef.current!);\n  }, []);\n\n  return <span className=\"duration\">{formatDuration(count)}</span>;\n}\n\ninterface CubeDisplayProps {\n  timerState: number;\n  timerDuration: DurationData;\n}\n\nfunction CubeDisplay({ timerState, timerDuration }: CubeDisplayProps) {\n \n  const isRunning = (timerState >= 20 && timerState < 30);\n  const isInspection = (timerState >= 10 && timerState < 20);\n  const isDefaultState = !isRunning && !isInspection;\n\n  return (\n    <>\n      {isDefaultState && timerDuration.duration !== 0 && (\n          <span className=\"duration\">\n            {formatDuration(timerDuration.duration)}\n          </span>\n        )}\n      {isDefaultState && timerDuration.duration === 0 && \n          <>Ready!</>\n      }\n      {isRunning && \n          <FakeRunTime />\n      }\n      {isInspection && \n          <>Inspection</>\n      }\n    </>\n  );\n}\n\nfunction App() {\n  const {\n    connect,\n    disconnect,\n    connectionState,\n    timerState,\n    timerDuration,\n  } = useBluetooth();\n\n  return (\n    <div\n      className=\"background\"\n      style={{\n        backgroundColor: getBackgroundColor(connectionState, timerState),\n      }}\n    >\n      <div className=\"main\">\n        {connectionState === ConnectionState.NOT_CONNECTED && (\n          <>\n            <button className=\"button\" onClick={connect}>Connect Cube Timer!</button>\n          </>\n        )}\n        {connectionState === ConnectionState.CONNECTING && <>Connecting...</>}\n        {connectionState === ConnectionState.CONNECTED && (\n          <CubeDisplay timerState={timerState} timerDuration={timerDuration} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}