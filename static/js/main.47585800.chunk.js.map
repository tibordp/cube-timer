{"version":3,"sources":["bluetooth.ts","App.tsx","index.tsx"],"names":["ConnectionState","CUBE_TIME_UUID","getBackgroundColor","connectionState","timerState","state","CONNECTED","formatDuration","milliseconds","Date","Math","max","toISOString","substr","replace","FakeRunTime","React","useState","count","setCount","rafRef","useRef","previousTimeRef","animate","time","undefined","current","deltaTime","prevCount","requestAnimationFrame","useEffect","cancelAnimationFrame","className","CubeDisplay","duration","epoch","isRunning","isInspection","isDefaultState","App","bluetoothGatt","setBluetoothGatt","NOT_CONNECTED","setConnectionState","device","setDevice","setTimerState","connect","a","CONNECTING","navigator","bluetooth","requestDevice","filters","services","disconnect","connectGatt","gatt","ongattserverdisconnected","getPrimaryService","service","getCharacteristic","characteristic","oncharacteristicvaluechanged","value","getUint32","byteLength","getInt32","readValue","startNotifications","console","error","FAILED","useBluetooth","style","backgroundColor","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oKAYYA,E,qFATNC,EAAiB,uCCKvB,SAASC,EACPC,EACAC,GACC,IACOC,EAAUD,EAAVC,MACR,OAAIF,IAAoBH,EAAgBM,UAAkB,UACtDD,GAAS,IAAMA,EAAQ,GAAW,UAClCA,GAAS,IAAMA,EAAQ,GAAW,UAE/B,UAGF,SAASE,EAAeC,GAC7B,OAAsB,IAAlBA,EACK,MAEF,IAAIC,KAAKC,KAAKC,IAAI,EAAGH,IACzBI,cACAC,OAAO,GAAI,GACXC,QAAQ,eAAgB,IAQ7B,SAASC,IAAe,IAAD,EACKC,IAAMC,SAAS,GADpB,mBACdC,EADc,KACPC,EADO,KAGfC,EAASJ,IAAMK,SACfC,EAAkBN,IAAMK,SAExBE,EAAU,SAAVA,EAAWC,GACf,QAAgCC,IAA5BH,EAAgBI,QAAuB,CACzC,IAAMC,EAAYH,EAAOF,EAAgBI,QACzCP,GAAS,SAACS,GAAD,OAAeA,EAAYD,KAEtCL,EAAgBI,QAAUF,EAC1BJ,EAAOM,QAAUG,sBAAsBN,IAQzC,OALAP,IAAMc,WAAU,WAEd,OADAV,EAAOM,QAAUG,sBAAsBN,GAChC,kBAAMQ,qBAAqBX,EAAOM,YACxC,IAEI,sBAAMM,UAAU,WAAhB,SAA4BzB,EAAeW,KAOpD,SAASe,EAAT,GAAwD,IAAjC7B,EAAgC,EAAhCA,WACbC,EAA2BD,EAA3BC,MAAc6B,GAAa9B,EAApB+B,MAAoB/B,EAAb8B,UAChBE,EAAa/B,GAAS,IAAMA,EAAQ,GACpCgC,EAAgBhC,GAAS,IAAMA,EAAQ,GACvCiC,GAAkBF,IAAcC,EAEtC,OACE,qCACGC,GAA+B,IAAbJ,GACf,sBAAMF,UAAU,WAAhB,SACGzB,EAAe2B,KAGrBI,GAA+B,IAAbJ,GACf,8CAEHE,GACG,cAACrB,EAAD,IAEHsB,GACG,sD,SDtEErC,O,iCAAAA,I,2BAAAA,I,yBAAAA,I,oBAAAA,M,KCgHGuC,MApCf,WAAgB,IAAD,ED9DR,WAA6C,IAAD,EAI7CvB,IAAMC,SAA2C,MAJJ,mBAE/CuB,EAF+C,KAG/CC,EAH+C,OAKHzB,IAAMC,SAA0BjB,EAAgB0C,eAL7C,mBAK1CvC,EAL0C,KAKzBwC,EALyB,OAMrB3B,IAAMC,SAAiC,MANlB,mBAM1C2B,EAN0C,KAMlCC,EANkC,OAOb7B,IAAMC,SAAqB,CAC7DZ,MAAO,EACP8B,MAAO,EACPD,SAAU,IAVqC,mBAO1C9B,EAP0C,KAO9B0C,EAP8B,KAa3CC,EAAO,uCAAG,4BAAAC,EAAA,6DACdL,EAAmB3C,EAAgBiD,YADrB,kBAGWC,UAAUC,UAAUC,cAAc,CACvDC,QAAS,CAAC,CAAEC,SAAU,CAACrD,OAJb,OAGJ2C,EAHI,OAMVC,EAAUD,GANA,gDAUVD,EAAmB3C,EAAgB0C,eAVzB,yDAAH,qDAcPa,EAAU,uCAAG,sBAAAP,EAAA,sDACjBH,EAAU,MADO,2CAAH,qDAgDhB,OA5CA7B,IAAMc,WAAU,WACd,IAAKc,EACH,OAAO,aAGT,IAAMY,EAAW,uCAAG,kCAAAR,EAAA,yFAEGJ,EAAOa,YAFV,aAEG,EAAaV,UAFhB,cAEVU,EAFU,OAGhBhB,EAAiBgB,GACjBb,EAAOc,yBAA2B,WAChCjB,EAAiB,MACjBE,EAAmB3C,EAAgBiD,YACnCO,KAPc,gBASMC,QATN,IASMA,OATN,EASMA,EAAME,kBAAkB1D,GAT9B,cASV2D,EATU,wBAUaA,QAVb,IAUaA,OAVb,EAUaA,EAASC,kBApElB,wCA0DJ,eAUVC,EAVU,QAaAC,6BAA+B,WAC7C,IAAM1D,EAAQyD,EAAgBE,MAAOC,UAAU,GAAG,GAC5C9B,EAAQ2B,EAAgBE,MAAOC,UAAU,GAAG,GAC5C/B,EACJ4B,EAAgBE,MAAOE,WAAa,EAChCJ,EAAgBE,MAAOG,SAAS,GAAG,GACnC,EAENrB,EAAc,CAAEzC,QAAO8B,QAAOD,cArBhB,iBAuBV4B,QAvBU,IAuBVA,OAvBU,EAuBVA,EAAgBM,YAvBN,QAwBF,OAAdN,QAAc,IAAdA,KAAgBO,qBAChB1B,EAAmB3C,EAAgBM,WAzBnB,kDA2BhBgE,QAAQC,MAAR,MACA5B,EAAmB3C,EAAgBwE,QA5BnB,0DAAH,qDAiCjB,OAFAhB,IAEO,WACQ,OAAbhB,QAAa,IAAbA,KAAee,aACfd,EAAiB,SAElB,CAACG,IAEG,CACLG,UACAQ,aACApD,kBACAC,cCXEqE,GAJF1B,EAFW,EAEXA,QAEA5C,GAJW,EAGXoD,WAHW,EAIXpD,iBACAC,EALW,EAKXA,WAGF,OACE,qBACE4B,UAAU,aACV0C,MAAO,CACLC,gBAAiBzE,EAAmBC,EAAiBC,IAHzD,SAME,sBAAK4B,UAAU,OAAf,UACG7B,IAAoBH,EAAgBwE,QACnC,qCACE,qDACA,wBAAQxC,UAAU,SAAS4C,QAAS7B,EAApC,oCAGH5C,IAAoBH,EAAgB0C,eACnC,mCACE,wBAAQV,UAAU,SAAS4C,QAAS7B,EAApC,mCAGH5C,IAAoBH,EAAgBiD,YAAc,qDAClD9C,IAAoBH,EAAgBM,WACnC,cAAC2B,EAAD,CAAa7B,WAAYA,UChHnCyE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.47585800.chunk.js","sourcesContent":["import { exception } from \"console\";\nimport React from \"react\";\n\nconst CUBE_TIME_UUID = \"eb0e77c3-af14-4b7f-ac80-d3631dc386ac\";\nconst CHARACTERISTIC_UUID = \"eb0e77c3-af14-4b7f-ac80-d3631dc386ad\";\n\nexport interface TimerState {\n  state: number;\n  epoch: number;\n  duration: number;\n}\n\nexport enum ConnectionState {\n  NOT_CONNECTED,\n  CONNECTING,\n  CONNECTED,\n  FAILED,\n}\n\nexport interface UseBluetoothResult {\n  connect(): void;\n  disconnect(): void;\n  connectionState: ConnectionState;\n  timerState: TimerState;\n}\n\nexport function useBluetooth(): UseBluetoothResult {\n  const [\n    bluetoothGatt,\n    setBluetoothGatt,\n  ] = React.useState<BluetoothRemoteGATTServer | null>(null);\n  const [connectionState, setConnectionState] = React.useState<ConnectionState>(ConnectionState.NOT_CONNECTED);\n  const [device, setDevice] = React.useState<BluetoothDevice | null>(null);\n  const [timerState, setTimerState] = React.useState<TimerState>({\n    state: 0,\n    epoch: 0,\n    duration: 0,\n  });\n\n  const connect = async () => {\n    setConnectionState(ConnectionState.CONNECTING);\n    try {\n        const device = await navigator.bluetooth.requestDevice({\n        filters: [{ services: [CUBE_TIME_UUID] }],\n        });\n        setDevice(device);\n    } catch (e) {\n        // User has likely canceled the dialog, or didn't find \n        // the device, so we don't treat this as error.\n        setConnectionState(ConnectionState.NOT_CONNECTED);\n    }\n  };\n\n  const disconnect = async () => {\n    setDevice(null);\n  };\n\n  React.useEffect(() => {\n    if (!device) {\n      return () => {};\n    }\n\n    const connectGatt = async () => {\n      try {\n        const gatt = await device.gatt?.connect();\n        setBluetoothGatt(gatt!);\n        device.ongattserverdisconnected = () => {\n          setBluetoothGatt(null);\n          setConnectionState(ConnectionState.CONNECTING);\n          connectGatt();\n        };\n        const service = await gatt?.getPrimaryService(CUBE_TIME_UUID);\n        const characteristic = await service?.getCharacteristic(\n          CHARACTERISTIC_UUID\n        );\n        characteristic!.oncharacteristicvaluechanged = () => {\n          const state = characteristic!.value!.getUint32(0, true);\n          const epoch = characteristic!.value!.getUint32(4, true);\n          const duration =\n            characteristic!.value!.byteLength > 4\n              ? characteristic!.value!.getInt32(8, true)\n              : 0;\n\n          setTimerState({ state, epoch, duration });\n        };\n        await characteristic?.readValue();\n        characteristic?.startNotifications();\n        setConnectionState(ConnectionState.CONNECTED);\n      } catch (e) {\n        console.error(e);\n        setConnectionState(ConnectionState.FAILED);\n      }\n    };\n    connectGatt();\n\n    return () => {\n      bluetoothGatt?.disconnect();\n      setBluetoothGatt(null);\n    };\n  }, [device]);\n\n  return {\n    connect,\n    disconnect,\n    connectionState,\n    timerState,\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  ConnectionState,\n  TimerState,\n  useBluetooth,\n} from \"./bluetooth\";\n\nfunction getBackgroundColor(\n  connectionState: ConnectionState,\n  timerState: TimerState\n) {\n  const { state } = timerState;\n  if (connectionState !== ConnectionState.CONNECTED) return \"#f5f2f0\";\n  if (state >= 10 && state < 20) return \"#f22d54\";\n  if (state >= 20 && state < 30) return \"#41c248\";\n\n  return \"#f5f2f0\";\n}\n\nexport function formatDuration(milliseconds: number): string {\n  if (milliseconds === -1) {\n    return \"DNF\";\n  }\n  return new Date(Math.max(0, milliseconds))\n    .toISOString()\n    .substr(14, 9)\n    .replace(/^[0:]+(?!\\.)/, \"\");\n}\n\n/**\n * While the timer is running, the device does not send anything via Bluetooth, \n * so we fake the running time display locally. Once the timer is stopped, the\n * correct time from the device will be displayed.\n */\nfunction FakeRunTime() {\n  const [count, setCount] = React.useState(0);\n\n  const rafRef = React.useRef<number>();\n  const previousTimeRef = React.useRef<number>();\n\n  const animate = (time: number) => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n      setCount((prevCount) => prevCount + deltaTime);\n    }\n    previousTimeRef.current = time;\n    rafRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    rafRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(rafRef.current!);\n  }, []);\n\n  return <span className=\"duration\">{formatDuration(count)}</span>;\n}\n\ninterface CubeDisplayProps {\n  timerState: TimerState;\n}\n\nfunction CubeDisplay({ timerState }: CubeDisplayProps) {\n  const { state, epoch, duration } = timerState;\n  const isRunning = (state >= 20 && state < 30);\n  const isInspection = (state >= 10 && state < 20);\n  const isDefaultState = !isRunning && !isInspection;\n\n  return (\n    <>\n      {isDefaultState && duration !== 0 && (\n          <span className=\"duration\">\n            {formatDuration(duration)}\n          </span>\n        )}\n      {isDefaultState && duration === 0 && \n          <>Ready!</>\n      }\n      {isRunning && \n          <FakeRunTime />\n      }\n      {isInspection && \n          <>Inspection</>\n      }\n    </>\n  );\n}\n\nfunction App() {\n  const {\n    connect,\n    disconnect,\n    connectionState,\n    timerState,\n  } = useBluetooth();\n\n  return (\n    <div\n      className=\"background\"\n      style={{\n        backgroundColor: getBackgroundColor(connectionState, timerState),\n      }}\n    >\n      <div className=\"main\">\n        {connectionState === ConnectionState.FAILED && (\n          <>\n            <p>Failed to connect :(</p>\n            <button className=\"button\" onClick={connect}>Connect Cube Timer!</button>\n          </>\n        )}\n        {connectionState === ConnectionState.NOT_CONNECTED && (\n          <>\n            <button className=\"button\" onClick={connect}>Connect Cube Timer!</button>\n          </>\n        )}\n        {connectionState === ConnectionState.CONNECTING && <>Connecting...</>}\n        {connectionState === ConnectionState.CONNECTED && (\n          <CubeDisplay timerState={timerState} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}